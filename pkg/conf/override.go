package conf

/** Mappings of toml config to override .env for each node type. */

func (config *NodeConfig) ToOverrideEnv(host string, nc NetworkConfig) map[string]string {
	overrideEnv := make(map[string]string)
	overrideEnv["AUDIUS_D_GENERATED"] = "This env file was generated by audius-d. All manual changes will be lost."

	switch nc.DeployOn {
	case Devnet:
		overrideEnv["NETWORK"] = "dev"
		overrideEnv["comms_sandbox"] = "true"
	case Testnet:
		overrideEnv["NETWORK"] = "stage"
	case Mainnet:
		overrideEnv["NETWORK"] = "prod"
	}

	switch config.Type {
	case Creator:
		overrideEnv["creatorNodeEndpoint"] = "https://" + host
		overrideEnv["delegateOwnerWallet"] = config.Wallet
		overrideEnv["delegatePrivateKey"] = config.PrivateKey
		overrideEnv["spOwnerWallet"] = config.RewardsWallet
		overrideEnv["ethOwnerWallet"] = config.RewardsWallet

		if config.StorageUrl != "" {
			overrideEnv["AUDIUS_STORAGE_DRIVER_URL"] = config.StorageUrl
		}
		if config.StorageCredentials != "" {
			overrideEnv["GOOGLE_APPLICATION_CREDENTIALS"] = config.StorageCredentials
		}

	case Discovery:
		overrideEnv["audius_delegate_owner_wallet"] = config.Wallet
		overrideEnv["audius_delegate_private_key"] = config.PrivateKey
		overrideEnv["audius_discprov_url"] = "https://" + host
	case Identity: // no-op
	}

	// Everything else we don't yet capture in audius-d models
	for k, v := range config.OverrideConfig {
		overrideEnv[k] = v
	}

	return overrideEnv
}
